From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: CrimsonEdgeHope <92579614+crimsonedgehope@users.noreply.github.com>
Date: Thu, 20 Feb 2025 14:30:28 +0800
Subject: [PATCH] Adaption


diff --git a/build.gradle.kts b/build.gradle.kts
index c52b43cde3338206e3e76542386fd4f8d0417d1c..685816802b45940613f7f1e8199687efa520fb63 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -5,6 +5,11 @@ plugins {
 
 val minecraftVersion = "1_8_R3"
 
+java {
+    sourceCompatibility = JavaVersion.VERSION_17
+    targetCompatibility = JavaVersion.VERSION_17
+}
+
 repositories {
     maven(url = "https://libraries.minecraft.net")
 }
@@ -19,23 +24,22 @@ dependencies {
     // PandaSpigot end
 
     // Minecraft libraries:
-    implementation("io.netty:netty-all:4.1.91.Final") // PandaSpigot - Update Netty to 4.1.x
+    implementation("io.netty:netty-all:4.1.97.Final") // PandaSpigot - Update Netty to 4.1.x
     implementation("com.mojang:authlib:1.5.21")
     // PandaSpigot start - Update log4j
-    implementation("org.apache.logging.log4j:log4j-api:2.17.1")
-    implementation("org.apache.logging.log4j:log4j-core:2.17.1")
-    implementation("org.apache.logging.log4j:log4j-slf4j-impl:2.17.1") // PandaSpigot - Add SLF4J logger
+    implementation("org.apache.logging.log4j:log4j-api:2.24.1")
+    implementation("org.apache.logging.log4j:log4j-core:2.24.1")
+    implementation("org.apache.logging.log4j:log4j-slf4j-impl:2.24.1") // PandaSpigot - Add SLF4J logger
     // PandaSpigot end
     implementation("org.apache.commons:commons-lang3:3.3.2")
-    implementation("commons-io:commons-io:2.4")
+    implementation("commons-io:commons-io:2.14.0")
     implementation("commons-codec:commons-codec:1.9")
-    implementation("com.google.guava:guava:17.0")
-    implementation("com.google.code.gson:gson:2.2.4")
+    implementation("com.google.guava:guava:33.3.1-jre")
+    implementation("com.google.code.gson:gson:2.8.9")
     implementation("net.sf.trove4j:trove4j:3.0.3")
     implementation("net.sf.jopt-simple:jopt-simple:3.2")
 
-    implementation("org.xerial:sqlite-jdbc:3.7.2")
-    implementation("mysql:mysql-connector-java:5.1.14")
+    implementation("org.xerial:sqlite-jdbc:3.41.2.2")
 
     // PandaSpigot start - Use TerminalConsoleAppender
     implementation("net.minecrell:terminalconsoleappender:1.3.0")
@@ -44,7 +48,7 @@ dependencies {
 
     implementation("net.kyori:adventure-key:4.10.1") // PandaSpigot - Add Channel initialization listeners
 
-    testImplementation("junit:junit:4.11")
+    testImplementation("junit:junit:4.13.1")
     testImplementation("org.hamcrest:hamcrest-library:1.3")
 }
 
diff --git a/src/main/java/net/minecraft/server/BaseBlockPosition.java b/src/main/java/net/minecraft/server/BaseBlockPosition.java
index a685e081258deb8c2b19cf5236fbbb43e0bad64d..beb99ba0ae66b959dd7d82b0c8d8c8919501771b 100644
--- a/src/main/java/net/minecraft/server/BaseBlockPosition.java
+++ b/src/main/java/net/minecraft/server/BaseBlockPosition.java
@@ -1,6 +1,6 @@
 package net.minecraft.server;
 
-import com.google.common.base.Objects;
+import com.google.common.base.MoreObjects;
 
 public class BaseBlockPosition implements Comparable<BaseBlockPosition> {
 
@@ -80,7 +80,7 @@ public class BaseBlockPosition implements Comparable<BaseBlockPosition> {
     }
 
     public String toString() {
-        return Objects.toStringHelper(this).add("x", this.getX()).add("y", this.getY()).add("z", this.getZ()).toString();
+        return MoreObjects.toStringHelper(this).add("x", this.getX()).add("y", this.getY()).add("z", this.getZ()).toString();
     }
 
     // Paperspigot - Signature change, Object -> BaseBlockPosition
diff --git a/src/main/java/net/minecraft/server/BlockState.java b/src/main/java/net/minecraft/server/BlockState.java
index 3cada5afc0542db3758e24dbadd9b24c11aa76f1..e582237ff7c2abfbcf92c5d14829c9c7c03df51d 100644
--- a/src/main/java/net/minecraft/server/BlockState.java
+++ b/src/main/java/net/minecraft/server/BlockState.java
@@ -1,6 +1,6 @@
 package net.minecraft.server;
 
-import com.google.common.base.Objects;
+import com.google.common.base.MoreObjects;
 
 public abstract class BlockState<T extends Comparable<T>> implements IBlockState<T> {
 
@@ -21,7 +21,7 @@ public abstract class BlockState<T extends Comparable<T>> implements IBlockState
     }
 
     public String toString() {
-        return Objects.toStringHelper(this).add("name", this.b).add("clazz", this.a).add("values", this.c()).toString();
+        return MoreObjects.toStringHelper(this).add("name", this.b).add("clazz", this.a).add("values", this.c()).toString();
     }
 
     public boolean equals(Object object) {
diff --git a/src/main/java/net/minecraft/server/BlockStateList.java b/src/main/java/net/minecraft/server/BlockStateList.java
index 6559cc50224064b6f69f389ef62978627292f369..0c05e9f5e4bf18eb5432ba807a45553eb6fde1f0 100644
--- a/src/main/java/net/minecraft/server/BlockStateList.java
+++ b/src/main/java/net/minecraft/server/BlockStateList.java
@@ -2,7 +2,7 @@ package net.minecraft.server;
 
 import com.google.common.base.Function;
 import com.google.common.base.Joiner;
-import com.google.common.base.Objects;
+import com.google.common.base.MoreObjects;
 import com.google.common.collect.HashBasedTable;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
@@ -101,7 +101,7 @@ public class BlockStateList {
     }
 
     public String toString() {
-        return Objects.toStringHelper(this).add("block", Block.REGISTRY.c(this.c)).add("properties", Iterables.transform(this.d, BlockStateList.b)).toString();
+        return MoreObjects.toStringHelper(this).add("block", Block.REGISTRY.c(this.c)).add("properties", Iterables.transform(this.d, BlockStateList.b)).toString();
     }
 
     static class BlockData extends BlockDataAbstract {
diff --git a/src/main/java/net/minecraft/server/BlockTripwireHook.java b/src/main/java/net/minecraft/server/BlockTripwireHook.java
index 0ad4a20f3cb0de792c7e80fba6d16a0df7e97b01..355d1a6b1b4d2389129c35472143164e9a4bf0a9 100644
--- a/src/main/java/net/minecraft/server/BlockTripwireHook.java
+++ b/src/main/java/net/minecraft/server/BlockTripwireHook.java
@@ -1,6 +1,6 @@
 package net.minecraft.server;
 
-import com.google.common.base.Objects;
+import com.google.common.base.MoreObjects;
 import com.google.common.base.Predicate;
 import java.util.Iterator;
 import java.util.Random;
@@ -113,7 +113,7 @@ public class BlockTripwireHook extends Block {
                 flag5 = false;
             } else {
                 if (k == i) {
-                    iblockdata2 = (IBlockData) Objects.firstNonNull(iblockdata1, iblockdata2);
+                    iblockdata2 = (IBlockData) MoreObjects.firstNonNull(iblockdata1, iblockdata2);
                 }
 
                 boolean flag7 = !((Boolean) iblockdata2.get(BlockTripwire.DISARMED)).booleanValue();
diff --git a/src/main/java/net/minecraft/server/EntityBat.java b/src/main/java/net/minecraft/server/EntityBat.java
index 4d3a13049b138e1c1e7cb0441a8d90e2132de8b5..195b1f363b54b9345a4c4887ec53762850031001 100644
--- a/src/main/java/net/minecraft/server/EntityBat.java
+++ b/src/main/java/net/minecraft/server/EntityBat.java
@@ -27,7 +27,7 @@ public class EntityBat extends EntityAmbient {
 
     protected void h() {
         super.h();
-        this.datawatcher.a(16, new Byte((byte) 0), META_UPSIDEDOWN, (byte) 0);
+        this.datawatcher.a(16, (byte) 0, META_UPSIDEDOWN, (byte) 0);
     }
 
     protected float bB() {
diff --git a/src/main/java/net/minecraft/server/EntityBlaze.java b/src/main/java/net/minecraft/server/EntityBlaze.java
index 0947fd68608221a9507eb9d36eb8f99fee702d8a..026a9f1082a0d012c719f5449ace140cfa070697 100644
--- a/src/main/java/net/minecraft/server/EntityBlaze.java
+++ b/src/main/java/net/minecraft/server/EntityBlaze.java
@@ -28,7 +28,7 @@ public class EntityBlaze extends EntityMonster {
 
     protected void h() {
         super.h();
-        this.datawatcher.a(16, new Byte((byte) 0), META_FIRE, (byte) 0);
+        this.datawatcher.a(16, (byte) 0, META_FIRE, (byte) 0);
     }
 
     protected String z() {
diff --git a/src/main/java/net/minecraft/server/EntityBoat.java b/src/main/java/net/minecraft/server/EntityBoat.java
index fd9491967ed951013021f7a5085c3c70626c044b..dd863aedadd43a039eb1721ea3f897d40699404a 100644
--- a/src/main/java/net/minecraft/server/EntityBoat.java
+++ b/src/main/java/net/minecraft/server/EntityBoat.java
@@ -62,9 +62,9 @@ public class EntityBoat extends Entity {
     }
 
     protected void h() {
-        this.datawatcher.a(17, new Integer(0), META_TIME_SINCE_HIT, 0);
-        this.datawatcher.a(18, new Integer(1), META_FORWARD_DIRECTION, 1);
-        this.datawatcher.a(19, new Float(0.0F), META_DAMAGE_TAKEN, 0F);
+        this.datawatcher.a(17, 0, META_TIME_SINCE_HIT, 0);
+        this.datawatcher.a(18, 1, META_FORWARD_DIRECTION, 1);
+        this.datawatcher.a(19, 0.0F, META_DAMAGE_TAKEN, 0F);
         this.datawatcher.a(-10, 0, META_UNKNOWN_INTEGER, 0);
         for (int i = 0; i < 3; i++) {
             this.datawatcher.a(-15 + i, 0F, META_UNKNOWN_FLOATS[i], 0F);
diff --git a/src/main/java/net/minecraft/server/EntityEnderman.java b/src/main/java/net/minecraft/server/EntityEnderman.java
index be081ecae4ddf9b4faf5e4bf1fd2d7df0b21ef37..db2816187e23ad3834c0d5fec5730514ac732163 100644
--- a/src/main/java/net/minecraft/server/EntityEnderman.java
+++ b/src/main/java/net/minecraft/server/EntityEnderman.java
@@ -58,9 +58,9 @@ public class EntityEnderman extends EntityMonster {
 
     protected void h() {
         super.h();
-        this.datawatcher.a(16, new Short((short) 0), META_BLOCK, Optional.<IBlockData> absent());
-        this.datawatcher.a(17, new Byte((byte) 0), META_BLOCK, Optional.<IBlockData> absent());
-        this.datawatcher.a(18, new Byte((byte) 0), META_ANGRY, false);
+        this.datawatcher.a(16, (short) 0, META_BLOCK, Optional.<IBlockData> absent());
+        this.datawatcher.a(17, (byte) 0, META_BLOCK, Optional.<IBlockData> absent());
+        this.datawatcher.a(18, (byte) 0, META_ANGRY, false);
     }
 
     public void b(NBTTagCompound nbttagcompound) {
diff --git a/src/main/java/net/minecraft/server/EntityMinecartFurnace.java b/src/main/java/net/minecraft/server/EntityMinecartFurnace.java
index a4a7ee56ec9ce05dac422a7e06cec25b6d054e7d..14394a2e1625aaca854c531f3580b23f24d7c2fa 100644
--- a/src/main/java/net/minecraft/server/EntityMinecartFurnace.java
+++ b/src/main/java/net/minecraft/server/EntityMinecartFurnace.java
@@ -21,7 +21,7 @@ public class EntityMinecartFurnace extends EntityMinecartAbstract {
 
     protected void h() {
         super.h();
-        this.datawatcher.a(16, new Byte((byte) 0), META_BURNING, false);
+        this.datawatcher.a(16, (byte) 0, META_BURNING, false);
     }
 
     public void t_() {
diff --git a/src/main/java/net/minecraft/server/EntitySheep.java b/src/main/java/net/minecraft/server/EntitySheep.java
index ef22dbabac692182e6e92efa3b43435c7185de02..81224ebc0b3eb84bd5a2e0ec80e77855c02a6010 100644
--- a/src/main/java/net/minecraft/server/EntitySheep.java
+++ b/src/main/java/net/minecraft/server/EntitySheep.java
@@ -72,7 +72,7 @@ public class EntitySheep extends EntityAnimal {
 
     protected void h() {
         super.h();
-        this.datawatcher.a(16, new Byte((byte) 0), META_WOOL_STATE, (byte) 0);
+        this.datawatcher.a(16, (byte) 0, META_WOOL_STATE, (byte) 0);
     }
 
     protected void dropDeathLoot(boolean flag, int i) {
diff --git a/src/main/java/net/minecraft/server/EntitySkeleton.java b/src/main/java/net/minecraft/server/EntitySkeleton.java
index 2978154574eca5386fe0bfe2b49a1f21c7392255..4970d9edb5ce6933887941e7956116482a7e5159 100644
--- a/src/main/java/net/minecraft/server/EntitySkeleton.java
+++ b/src/main/java/net/minecraft/server/EntitySkeleton.java
@@ -37,7 +37,7 @@ public class EntitySkeleton extends EntityMonster implements IRangedEntity {
 
     protected void h() {
         super.h();
-        this.datawatcher.a(13, new Byte((byte) 0), META_TYPE, 0);
+        this.datawatcher.a(13, (byte) 0, META_TYPE, 0);
         this.datawatcher.a(-20, (byte) 0, META_AIMING, false);
     }
 
diff --git a/src/main/java/net/minecraft/server/EntitySlice.java b/src/main/java/net/minecraft/server/EntitySlice.java
index ae6c52f2cc72aa63458ce352389616baa097d8ff..2b2150268ecf719e11feeea878a02327f730b606 100644
--- a/src/main/java/net/minecraft/server/EntitySlice.java
+++ b/src/main/java/net/minecraft/server/EntitySlice.java
@@ -5,6 +5,7 @@ import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
 import java.util.AbstractSet;
+import java.util.Collections;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
@@ -114,7 +115,7 @@ public class EntitySlice<T> extends AbstractSet<T> {
                 List list = (List) EntitySlice.this.b.get(EntitySlice.this.b(oclass));
 
                 if (list == null) {
-                    return Iterators.emptyIterator();
+                    return Collections.emptyIterator();
                 } else {
                     Iterator iterator = list.iterator();
 
@@ -125,7 +126,7 @@ public class EntitySlice<T> extends AbstractSet<T> {
     }
 
     public Iterator<T> iterator() {
-        return this.e.isEmpty() ? Iterators.<T>emptyIterator() : Iterators.unmodifiableIterator(this.e.iterator());
+        return this.e.isEmpty() ? Collections.emptyIterator() : Iterators.unmodifiableIterator(this.e.iterator());
     }
 
     public int size() {
diff --git a/src/main/java/net/minecraft/server/EntitySpider.java b/src/main/java/net/minecraft/server/EntitySpider.java
index e37cf668acfe4e65894fd07ac15c762d39386d70..0a3b0e680326b2ae57efc61ff607cf1d52ac1321 100644
--- a/src/main/java/net/minecraft/server/EntitySpider.java
+++ b/src/main/java/net/minecraft/server/EntitySpider.java
@@ -31,7 +31,7 @@ public class EntitySpider extends EntityMonster {
 
     protected void h() {
         super.h();
-        this.datawatcher.a(16, new Byte((byte) 0), META_CLIMBING, (byte) 0);
+        this.datawatcher.a(16, (byte) 0, META_CLIMBING, (byte) 0);
     }
 
     public void t_() {
diff --git a/src/main/java/net/minecraft/server/EntityWither.java b/src/main/java/net/minecraft/server/EntityWither.java
index 4efe5bc2b5067742ead6d333117bb02d3314c6dd..53e67b3788724086a221f5243759aa3cfe3285f1 100644
--- a/src/main/java/net/minecraft/server/EntityWither.java
+++ b/src/main/java/net/minecraft/server/EntityWither.java
@@ -54,10 +54,10 @@ public class EntityWither extends EntityMonster implements IRangedEntity {
 
     protected void h() {
         super.h();
-        this.datawatcher.a(17, new Integer(0), META_TARGET_1, new Integer(0));
-        this.datawatcher.a(18, new Integer(0), META_TARGET_2, new Integer(0));
-        this.datawatcher.a(19, new Integer(0), META_TARGET_3, new Integer(0));
-        this.datawatcher.a(20, new Integer(0), META_INVUL_TIME, new Integer(0));
+        this.datawatcher.a(17, 0, META_TARGET_1, 0);
+        this.datawatcher.a(18, 0, META_TARGET_2, 0);
+        this.datawatcher.a(19, 0, META_TARGET_3, 0);
+        this.datawatcher.a(20, 0, META_INVUL_TIME, 0);
     }
 
     public void b(NBTTagCompound nbttagcompound) {
@@ -484,7 +484,7 @@ public class EntityWither extends EntityMonster implements IRangedEntity {
     }
 
     public void r(int i) {
-        this.datawatcher.watch(20, Integer.valueOf(i), META_INVUL_TIME, new Integer(i));
+        this.datawatcher.watch(20, Integer.valueOf(i), META_INVUL_TIME, i);
     }
 
     public int s(int i) {
diff --git a/src/main/java/net/minecraft/server/EntityWolf.java b/src/main/java/net/minecraft/server/EntityWolf.java
index b7c6cc7dfcdda40c8a97b6c90e7eb7dcaa4e6d58..ef9b13944c5ef2a4d84b041f60fb2a0b4442015b 100644
--- a/src/main/java/net/minecraft/server/EntityWolf.java
+++ b/src/main/java/net/minecraft/server/EntityWolf.java
@@ -90,9 +90,9 @@ public class EntityWolf extends EntityTameableAnimal {
 
     protected void h() {
         super.h();
-        this.datawatcher.a(18, new Float(this.getHealth()), META_WOLF_HEALTH, getHealth());
-        this.datawatcher.a(19, new Byte((byte) 0), META_BEGGING, false);
-        this.datawatcher.a(20, new Byte((byte) EnumColor.RED.getColorIndex()), META_COLLAR, EnumColor.RED.getColorIndex());
+        this.datawatcher.a(18, this.getHealth(), META_WOLF_HEALTH, getHealth());
+        this.datawatcher.a(19, (byte) 0, META_BEGGING, false);
+        this.datawatcher.a(20, (byte) EnumColor.RED.getColorIndex(), META_COLLAR, EnumColor.RED.getColorIndex());
     }
 
     protected void a(BlockPosition blockposition, Block block) {
diff --git a/src/main/java/net/minecraft/server/LocaleLanguage.java b/src/main/java/net/minecraft/server/LocaleLanguage.java
index 1af40905e279a30d64bd5c8961797dce3ce2aaf1..a6ba1fd24b14f7b343e22220883455151486d35f 100644
--- a/src/main/java/net/minecraft/server/LocaleLanguage.java
+++ b/src/main/java/net/minecraft/server/LocaleLanguage.java
@@ -41,8 +41,10 @@ public class LocaleLanguage {
             }
 
             this.e = System.currentTimeMillis();
-        } catch (IOException ioexception) {
-            ;
+        } catch (Exception e) {
+            if (!(e instanceof IOException)) {
+                throw e;
+            }
         }
 
     }
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 02fcf42f41c5a27720e29692e9766b5e11ad4245..72888d94f1c0d256497003bbea0a57c053f3d3a3 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -1653,7 +1653,8 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
             try {
                 return Futures.immediateFuture(callable.call());
             } catch (Exception exception) {
-                return Futures.immediateFailedCheckedFuture(exception);
+                // TODO: Checked exception?
+                return Futures.immediateFailedFuture(exception);
             }
         }
     }
diff --git a/src/main/java/net/minecraft/server/PacketDataSerializer.java b/src/main/java/net/minecraft/server/PacketDataSerializer.java
index 66bba10ffbd637a09cffe8824c4682abc8e9ef2f..c6070ef3f490136cb08fce5b5cd7f8918b96afb0 100644
--- a/src/main/java/net/minecraft/server/PacketDataSerializer.java
+++ b/src/main/java/net/minecraft/server/PacketDataSerializer.java
@@ -38,6 +38,11 @@ public class PacketDataSerializer extends ByteBuf {
     private static final int LARGE_PACKET_LIMIT = Short.MAX_VALUE * 1024;
     private final boolean allowLargePackets;
     public PacketDataSerializer(ByteBuf bytebuf) {
+    // PandaSpigot end
+        this(bytebuf, 47);
+    }
+    
+    public PacketDataSerializer(ByteBuf bytebuf, int version) {
         /*
          * By default, we limit the size of the received byte array to Short.MAX_VALUE, which is 31 KB.
          * However, we make an exception when ProtocolSupport is installed, to allow 1.7 clients to work,
@@ -47,12 +52,6 @@ public class PacketDataSerializer extends ByteBuf {
          * which would leave the server vulnerable to packets up to 2 GIGABYTES in size.
          */
         this.allowLargePackets = com.hpfxd.pandaspigot.CompactHacks.hasProtocolSupport();
-    // PandaSpigot end
-        this.a = bytebuf;
-        version = 47;
-    }
-    
-    public PacketDataSerializer(ByteBuf bytebuf, int version) {
         this.a = bytebuf;
         this.version = version;
     }
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutPlayerInfo.java b/src/main/java/net/minecraft/server/PacketPlayOutPlayerInfo.java
index f2c37f54ae25a03716ef1828d7945d3626e4a027..daf5d3ad4b873a454de8211f9b9d65c088a71312 100644
--- a/src/main/java/net/minecraft/server/PacketPlayOutPlayerInfo.java
+++ b/src/main/java/net/minecraft/server/PacketPlayOutPlayerInfo.java
@@ -1,6 +1,6 @@
 package net.minecraft.server;
 
-import com.google.common.base.Objects;
+import com.google.common.base.MoreObjects;
 import com.google.common.collect.Lists;
 import com.mojang.authlib.GameProfile;
 import com.mojang.authlib.properties.Property;
@@ -170,7 +170,7 @@ public class PacketPlayOutPlayerInfo implements Packet<PacketListenerPlayOut> {
     }
 
     public String toString() {
-        return Objects.toStringHelper(this).add("action", this.a).add("entries", this.b).toString();
+        return MoreObjects.toStringHelper(this).add("action", this.a).add("entries", this.b).toString();
     }
 
     static class SyntheticClass_1 {
@@ -242,7 +242,7 @@ public class PacketPlayOutPlayerInfo implements Packet<PacketListenerPlayOut> {
         }
 
         public String toString() {
-            return Objects.toStringHelper(this).add("latency", this.b).add("gameMode", this.c).add("profile", this.d).add("displayName", this.e == null ? null : IChatBaseComponent.ChatSerializer.a(this.e)).toString();
+            return MoreObjects.toStringHelper(this).add("latency", this.b).add("gameMode", this.c).add("profile", this.d).add("displayName", this.e == null ? null : IChatBaseComponent.ChatSerializer.a(this.e)).toString();
         }
     }
 
diff --git a/src/main/java/net/minecraft/server/ShapeDetector.java b/src/main/java/net/minecraft/server/ShapeDetector.java
index 765f8eb9d5dc9c0d5f229dd326c1ed2d3f4d77af..d45562988e785c8196fe1087adbf1b50d2a36cb2 100644
--- a/src/main/java/net/minecraft/server/ShapeDetector.java
+++ b/src/main/java/net/minecraft/server/ShapeDetector.java
@@ -1,6 +1,6 @@
 package net.minecraft.server;
 
-import com.google.common.base.Objects;
+import com.google.common.base.MoreObjects;
 import com.google.common.base.Predicate;
 import com.google.common.cache.CacheBuilder;
 import com.google.common.cache.CacheLoader;
@@ -146,7 +146,7 @@ public class ShapeDetector {
         }
 
         public String toString() {
-            return Objects.toStringHelper(this).add("up", this.c).add("forwards", this.b).add("frontTopLeft", this.a).toString();
+            return MoreObjects.toStringHelper(this).add("up", this.c).add("forwards", this.b).add("frontTopLeft", this.a).toString();
         }
     }
 
diff --git a/src/main/java/net/minecraft/server/StructureBoundingBox.java b/src/main/java/net/minecraft/server/StructureBoundingBox.java
index d6c2aac9f299df7d616c883e6c55c403ee19da7c..b59c0594de91d2d2ce4587b5088ab935706af840 100644
--- a/src/main/java/net/minecraft/server/StructureBoundingBox.java
+++ b/src/main/java/net/minecraft/server/StructureBoundingBox.java
@@ -1,6 +1,6 @@
 package net.minecraft.server;
 
-import com.google.common.base.Objects;
+import com.google.common.base.MoreObjects;
 
 public class StructureBoundingBox {
 
@@ -139,7 +139,7 @@ public class StructureBoundingBox {
     }
 
     public String toString() {
-        return Objects.toStringHelper(this).add("x0", this.a).add("y0", this.b).add("z0", this.c).add("x1", this.d).add("y1", this.e).add("z1", this.f).toString();
+        return MoreObjects.toStringHelper(this).add("x0", this.a).add("y0", this.b).add("z0", this.c).add("x1", this.d).add("y1", this.e).add("z1", this.f).toString();
     }
 
     public NBTTagIntArray g() {
diff --git a/src/main/java/net/minecraft/server/WorldGenCaves.java b/src/main/java/net/minecraft/server/WorldGenCaves.java
index 2cdd023782bd1783916cb5bd7a1a3dd80ae5ac4f..4c77f0a90890289c897acab0ec7cfc45667bf732 100644
--- a/src/main/java/net/minecraft/server/WorldGenCaves.java
+++ b/src/main/java/net/minecraft/server/WorldGenCaves.java
@@ -1,6 +1,6 @@
 package net.minecraft.server;
 
-import com.google.common.base.Objects;
+import com.google.common.base.MoreObjects;
 import java.util.Random;
 
 public class WorldGenCaves extends WorldGenBase {
@@ -140,7 +140,7 @@ public class WorldGenCaves extends WorldGenBase {
 
                                         if (d14 > -0.7D && d12 * d12 + d14 * d14 + d13 * d13 < 1.0D) {
                                             IBlockData iblockdata1 = chunksnapshot.a(j3, j4, i4);
-                                            IBlockData iblockdata2 = (IBlockData) Objects.firstNonNull(chunksnapshot.a(j3, j4 + 1, i4), Blocks.AIR.getBlockData());
+                                            IBlockData iblockdata2 = (IBlockData) MoreObjects.firstNonNull(chunksnapshot.a(j3, j4 + 1, i4), Blocks.AIR.getBlockData());
 
                                             if (iblockdata1.getBlock() == Blocks.GRASS || iblockdata1.getBlock() == Blocks.MYCELIUM) {
                                                 flag3 = true;
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 1a85a4058566fc3edd5ced027fc2209672447526..151e54f56a61e0735022dd514b015562629a91cd 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -23,6 +23,7 @@ import java.util.regex.Pattern;
 
 import javax.imageio.ImageIO;
 
+import com.google.common.cache.CacheBuilder;
 import net.minecraft.server.*;
 
 import org.bukkit.BanList;
@@ -102,6 +103,7 @@ import org.bukkit.plugin.messaging.StandardMessenger;
 import org.bukkit.scheduler.BukkitWorker;
 import org.bukkit.util.StringUtil;
 import org.bukkit.util.permissions.DefaultPermissions;
+import org.yaml.snakeyaml.LoaderOptions;
 import org.yaml.snakeyaml.Yaml;
 import org.yaml.snakeyaml.constructor.SafeConstructor;
 import org.yaml.snakeyaml.error.MarkedYAMLException;
@@ -142,8 +144,9 @@ public final class CraftServer implements Server {
     private final Map<String, World> worlds = new LinkedHashMap<String, World>();
     private YamlConfiguration configuration;
     private YamlConfiguration commandsConfiguration;
-    private final Yaml yaml = new Yaml(new SafeConstructor());
-    private final Map<UUID, OfflinePlayer> offlinePlayers = new MapMaker().softValues().makeMap();
+    private final LoaderOptions loaderOptions;
+    private final Yaml yaml;
+    private final Map<UUID, OfflinePlayer> offlinePlayers = CacheBuilder.newBuilder().softValues().<UUID, OfflinePlayer>build().asMap();
     private final EntityMetadataStore entityMetadata = new EntityMetadataStore();
     private final PlayerMetadataStore playerMetadata = new PlayerMetadataStore();
     private final WorldMetadataStore worldMetadata = new WorldMetadataStore();
@@ -176,6 +179,9 @@ public final class CraftServer implements Server {
     }
 
     public CraftServer(MinecraftServer console, PlayerList playerList) {
+        this.loaderOptions = new LoaderOptions();
+        this.loaderOptions.setAllowDuplicateKeys(false);
+        this.yaml = new Yaml(new SafeConstructor(this.loaderOptions));
         this.console = console;
         this.playerList = (DedicatedPlayerList) playerList;
         this.playerView = Collections.unmodifiableList(Lists.transform(playerList.players, new Function<EntityPlayer, CraftPlayer>() {
