From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: CrimsonEdgeHope <92579614+crimsonedgehope@users.noreply.github.com>
Date: Thu, 20 Feb 2025 13:47:56 +0800
Subject: [PATCH] Remove DataWatcher Locking

The lock in DataWatcher is used to prevent concurrent modifications,
however any modifications to this map only occur on initialization of
an Entity in its constructor.

Every other access is through a readlock, which allows the threads to
pass if there is no thread holding the writelock.

Since the writelock is only obtained in the constructor of the Entity,
the further readlocks are actually useless.

diff --git a/src/main/java/net/minecraft/server/DataWatcher.java b/src/main/java/net/minecraft/server/DataWatcher.java
index 9e351b1d4d575fe735310ab0fdd70fae61169edc..7c7c4901f1dfbf10f7d44c4ab484d1750452d54a 100644
--- a/src/main/java/net/minecraft/server/DataWatcher.java
+++ b/src/main/java/net/minecraft/server/DataWatcher.java
@@ -24,7 +24,7 @@ public class DataWatcher {
     private final Map<Integer, DataWatcher.WatchableObject> d = gnu.trove.TDecorators.wrap( dataValues );
     // Spigot End
     private boolean e;
-    private ReadWriteLock f = new ReentrantReadWriteLock();
+    // private ReadWriteLock f = new ReentrantReadWriteLock(); // PandaSpigot - Remove DataWatcher Locking
 	private static final Map<Class<? extends Entity>, Integer> dataTypes = Maps.newHashMap();
 
     public DataWatcher(Entity entity) {
@@ -59,7 +59,9 @@ public class DataWatcher {
 		return kf2.fromIndex(n2);
 	}
 
+    boolean registrationLocked; // PandaSpigot
     public <T, Y> void a(int i, T t0, DataIndex<Y> index, Y newValue) {
+        if (registrationLocked) throw new IllegalStateException("Registering datawatcher object after entity initialization"); // PandaSpigot
         int integer = classToId.get(t0.getClass()); // Spigot
 
         if (integer == -1) { // Spigot
@@ -71,9 +73,9 @@ public class DataWatcher {
         } else {
             DataWatcher.WatchableObject datawatcher_watchableobject = new DataWatcher.WatchableObject(integer, i, t0, index, newValue); // Spigot
 
-            this.f.writeLock().lock();
+            // this.f.writeLock().lock(); // PandaSpigot
             this.dataValues.put(i, datawatcher_watchableobject); // Spigot
-            this.f.writeLock().unlock();
+            // this.f.writeLock().unlock(); // PandaSpigot
             this.b = false;
         }
     }
@@ -81,9 +83,9 @@ public class DataWatcher {
     public <Y> void add(int i, int j, DataIndex<Y> index, Y newValue) {
         DataWatcher.WatchableObject datawatcher_watchableobject = new DataWatcher.WatchableObject(j, i, (Object) null, index, newValue);
 
-        this.f.writeLock().lock();
+        // this.f.writeLock().lock(); // PandaSpigot
         this.dataValues.put(i, datawatcher_watchableobject); // Spigot
-        this.f.writeLock().unlock();
+        // this.f.writeLock().unlock(); // PandaSpigot
         this.b = false;
     }
 
@@ -112,6 +114,8 @@ public class DataWatcher {
     }
 
     private DataWatcher.WatchableObject j(int i) {
+        // PandaSpigot start - Remove DataWatcher Locking
+        /*
         this.f.readLock().lock();
 
         DataWatcher.WatchableObject datawatcher_watchableobject;
@@ -128,6 +132,9 @@ public class DataWatcher {
 
         this.f.readLock().unlock();
         return datawatcher_watchableobject;
+        */
+        return (WatchableObject) this.dataValues.get(i);
+        // PandaSpigot end
     }
 
     public Vector3f h(int i) {
@@ -177,7 +184,7 @@ public class DataWatcher {
         ArrayList arraylist = null;
 
         if (this.e) {
-            this.f.readLock().lock();
+            // this.f.readLock().lock(); // PandaSpigot
             Iterator iterator = this.dataValues.valueCollection().iterator(); // Spigot
 
             while (iterator.hasNext()) {
@@ -205,7 +212,7 @@ public class DataWatcher {
                 }
             }
 
-            this.f.readLock().unlock();
+            // this.f.readLock().unlock(); // PandaSpigot
         }
 
         this.e = false;
@@ -213,7 +220,7 @@ public class DataWatcher {
     }
 
     public void a(PacketDataSerializer packetdataserializer) throws IOException {
-        this.f.readLock().lock();
+        // this.f.readLock().lock(); // PandaSpigot
         Iterator iterator = this.dataValues.valueCollection().iterator(); // Spigot
 
         while (iterator.hasNext()) {
@@ -222,7 +229,7 @@ public class DataWatcher {
             a(packetdataserializer, datawatcher_watchableobject);
         }
 
-        this.f.readLock().unlock();
+        // this.f.readLock().unlock(); // PandaSpigot
         if (packetdataserializer.version == 47)
             packetdataserializer.writeByte(127);
         else
@@ -232,7 +239,7 @@ public class DataWatcher {
     public List<DataWatcher.WatchableObject> c() {
         ArrayList arraylist = Lists.newArrayList(); // Spigot
 
-        this.f.readLock().lock();
+        // this.f.readLock().lock(); // PandaSpigot
 
         arraylist.addAll(this.dataValues.valueCollection()); // Spigot
         // Spigot start - copy ItemStacks to prevent ConcurrentModificationExceptions
@@ -261,7 +268,7 @@ public class DataWatcher {
         }
         // Spigot end
 
-        this.f.readLock().unlock();
+        // this.f.readLock().unlock(); // PandaSpigot
         return arraylist;
     }
 
diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index 7b9c1f152e734b2dc8231277c45f4b7df5d0b1fd..ae310421c45d4539292db591d58daf9bc056bc9d 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -240,6 +240,7 @@ public abstract class Entity implements ICommandListener {
         this.datawatcher.a(2, "", META_CUSTOMNAME, "");
         this.datawatcher.a(4, Byte.valueOf((byte) 0), META_SILENT, false);
         this.h();
+        this.datawatcher.registrationLocked = true; // PandaSpigot
     }
 
     protected abstract void h();
